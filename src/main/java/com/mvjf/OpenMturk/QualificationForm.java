/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mvjf.OpenMturk;

import com.amazonaws.services.mturk.AmazonMTurk;
import com.amazonaws.services.mturk.model.ListQualificationTypesRequest;
import com.amazonaws.services.mturk.model.ListQualificationTypesResult;
import com.amazonaws.services.mturk.model.Locale;
import com.amazonaws.services.mturk.model.QualificationRequirement;
import com.amazonaws.services.mturk.model.QualificationType;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;


public final class QualificationForm extends javax.swing.JDialog {
    private final HashMap<String, QualificationRequirement> qreqsHM;
    private final HashMap<String,String> customQtypeHM;
    private final HashMap<String,String> systemQtypeHM;
    private HashMap<String, String[]> comparatorHM;
    
    public QualificationForm(java.awt.Frame parent, boolean modal, AmazonMTurk client, HashMap<String,String> systemQtypeHM, HashMap<String, QualificationRequirement> qreqsHM) {
        super(parent, modal);
        initComponents();
        this.customQtypeHM = getCustomQualificationTypes(client);
        this.systemQtypeHM = systemQtypeHM;
        this.qreqsHM = qreqsHM;
        setQualificationRequirementsList();
        setQualificationTypeNames();
        setLocales();
        setComparatorValues();
    }  
    
    public HashMap<String, QualificationRequirement> getQualificationRequirements() {
        return qreqsHM;
    }
    
    public void setQualificationRequirementsList() {
        String qreqNames[] = (String[])qreqsHM.keySet().toArray(new String[qreqsHM.size()]);
        lstCurrentQualificationRequirements.setListData(qreqNames);
    }
    
    public final void setQualificationTypeNames() {
        String qtypeNames[] = (String[])customQtypeHM.keySet().toArray(new String[customQtypeHM.size()]);
        for (int i = 0; i < qtypeNames.length; i++) {
            cmbxQualificationTypes.addItem(qtypeNames[i]);
        }
    }
    
    public final void setComparatorValues() {
        comparatorHM = new HashMap<>();
        String[] existsDoesNotExistComparators = {"Exists", "DoesNotExist"};
        String[] equalToNotEqualToComparators = {"EqualTo", "NotEqualTo"};
        String[] valueComparators = {"LessThan", "LessThanOrEqualTo", "GreaterThan", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo" };
        comparatorHM.put("HITs Approved", valueComparators);
        comparatorHM.put("HIT Approval Rate", valueComparators);
        comparatorHM.put("Adult Workers", equalToNotEqualToComparators);
        comparatorHM.put("Masters", existsDoesNotExistComparators);
    }
    
    public final void setLocales() {
        lstLocales.setListData(Util.getLocales());
    }
    
    private ArrayList getSelectedLocales() {
        List<String> selectedLocales = lstLocales.getSelectedValuesList();
        ArrayList locales = new ArrayList();
        for (int i = 0; i < selectedLocales.size(); i++) {
            Locale locale = new Locale();
            String countryCode = selectedLocales.get(i).substring(Math.max(selectedLocales.get(i).length() - 2, 0));
            locale.setCountry(countryCode);
            locales.add(locale);
        }
        return locales;
    }
    
    public static HashMap<String,String> getCustomQualificationTypes(AmazonMTurk client) {
        ListQualificationTypesRequest request = new ListQualificationTypesRequest();
        request.setMustBeOwnedByCaller(true);
        request.setMustBeRequestable(true);
        ListQualificationTypesResult result = client.listQualificationTypes(request);
        List<QualificationType> qtypes = result.getQualificationTypes();
        HashMap<String, String> qtypeHM = new HashMap<>();
        for (int i = 0; i < qtypes.size(); i++) {
            String qtypeID = qtypes.get(i).getQualificationTypeId();
            String qtypeName = qtypes.get(i).getName();
            qtypeHM.put(qtypeName, qtypeID);
        }
        return qtypeHM;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sclCurrentQualificationRequirements = new javax.swing.JScrollPane();
        lstCurrentQualificationRequirements = new javax.swing.JList<>();
        btnDeleteQualificationRequirement = new javax.swing.JButton();
        lblCurrentQualificationRequirements = new javax.swing.JLabel();
        pnlQualCards = new javax.swing.JPanel();
        pnlCustomQualifications = new javax.swing.JPanel();
        lblQualificationType = new javax.swing.JLabel();
        cmbxQualificationTypes = new javax.swing.JComboBox<>();
        lblComparator = new javax.swing.JLabel();
        cmbxComparator = new javax.swing.JComboBox<>();
        lblValue = new javax.swing.JLabel();
        txtValue = new javax.swing.JTextField();
        lblActionsGuarded = new javax.swing.JLabel();
        cmbxActionsGuarded = new javax.swing.JComboBox<>();
        pnlSystemQualifications = new javax.swing.JPanel();
        cmbxSystemQualificationType = new javax.swing.JComboBox<>();
        pnlSystemCards = new javax.swing.JPanel();
        pnlLocale = new javax.swing.JPanel();
        sclLocales = new javax.swing.JScrollPane();
        lstLocales = new javax.swing.JList<>();
        cmbxLocaleComparator = new javax.swing.JComboBox<>();
        pnlOtherSystemQualifications = new javax.swing.JPanel();
        cmbxSystemComparator = new javax.swing.JComboBox<>();
        lblQualUnit = new javax.swing.JLabel();
        txtSystemComparatorValue = new javax.swing.JTextField();
        cmbxQualificationRequirementType = new javax.swing.JComboBox<>();
        btnAddQualificationRequirement = new javax.swing.JButton();
        btnCloseQualificationForm = new javax.swing.JButton();
        lblQualificationStatus = new javax.swing.JLabel();
        btnQualificationInformation = new javax.swing.JButton();
        lblOpenDocsError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Qualification Form");

        sclCurrentQualificationRequirements.setToolTipText("");
        sclCurrentQualificationRequirements.setMaximumSize(new java.awt.Dimension(259, 303));
        sclCurrentQualificationRequirements.setMinimumSize(new java.awt.Dimension(259, 303));
        sclCurrentQualificationRequirements.setPreferredSize(new java.awt.Dimension(259, 303));

        sclCurrentQualificationRequirements.setViewportView(lstCurrentQualificationRequirements);

        btnDeleteQualificationRequirement.setText("Remove Requirement");
        btnDeleteQualificationRequirement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteQualificationRequirementMouseClicked(evt);
            }
        });

        lblCurrentQualificationRequirements.setText("Qualification Requirements:");

        pnlQualCards.setLayout(new java.awt.CardLayout());

        lblQualificationType.setText("Qualification Type:");

        lblComparator.setText("Comparator:");

        cmbxComparator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LessThan", "LessThanOrEqualTo", "GreaterThan", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", "Exists", "DoesNotExist" }));

        lblValue.setText("Value:");

        lblActionsGuarded.setText("Actions Guarded:");

        cmbxActionsGuarded.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accept", "PreviewAndAccept", "DiscoverPreviewAndAccept" }));

        javax.swing.GroupLayout pnlCustomQualificationsLayout = new javax.swing.GroupLayout(pnlCustomQualifications);
        pnlCustomQualifications.setLayout(pnlCustomQualificationsLayout);
        pnlCustomQualificationsLayout.setHorizontalGroup(
            pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomQualificationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQualificationType)
                    .addComponent(lblComparator)
                    .addComponent(lblValue)
                    .addComponent(lblActionsGuarded))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbxComparator, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbxActionsGuarded, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbxQualificationTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        pnlCustomQualificationsLayout.setVerticalGroup(
            pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomQualificationsLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbxQualificationTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQualificationType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbxComparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblComparator))
                .addGap(18, 18, 18)
                .addGroup(pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomQualificationsLayout.createSequentialGroup()
                        .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlCustomQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbxActionsGuarded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblActionsGuarded)))
                    .addComponent(lblValue))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        pnlQualCards.add(pnlCustomQualifications, "Custom Qualifications");

        cmbxSystemQualificationType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Locale", "HITs Approved", "Adult Workers", "HIT Approval Rate", "Masters" }));
        cmbxSystemQualificationType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxSystemQualificationTypeItemStateChanged(evt);
            }
        });

        pnlSystemCards.setLayout(new java.awt.CardLayout());

        sclLocales.setViewportView(lstLocales);

        cmbxLocaleComparator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EqualTo", "NotEqualTo", "In", "NotIn" }));

        javax.swing.GroupLayout pnlLocaleLayout = new javax.swing.GroupLayout(pnlLocale);
        pnlLocale.setLayout(pnlLocaleLayout);
        pnlLocaleLayout.setHorizontalGroup(
            pnlLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLocaleLayout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(sclLocales, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(pnlLocaleLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(cmbxLocaleComparator, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlLocaleLayout.setVerticalGroup(
            pnlLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLocaleLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(sclLocales, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(cmbxLocaleComparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pnlSystemCards.add(pnlLocale, "Locale");

        cmbxSystemComparator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LessThan", "LessThanOrEqualTo", "GreaterThan", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo" }));

        javax.swing.GroupLayout pnlOtherSystemQualificationsLayout = new javax.swing.GroupLayout(pnlOtherSystemQualifications);
        pnlOtherSystemQualifications.setLayout(pnlOtherSystemQualificationsLayout);
        pnlOtherSystemQualificationsLayout.setHorizontalGroup(
            pnlOtherSystemQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOtherSystemQualificationsLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(pnlOtherSystemQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOtherSystemQualificationsLayout.createSequentialGroup()
                        .addComponent(txtSystemComparatorValue, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(lblQualUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbxSystemComparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pnlOtherSystemQualificationsLayout.setVerticalGroup(
            pnlOtherSystemQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOtherSystemQualificationsLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(cmbxSystemComparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(pnlOtherSystemQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSystemComparatorValue)
                    .addComponent(lblQualUnit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pnlSystemCards.add(pnlOtherSystemQualifications, "Other Qualifications");

        javax.swing.GroupLayout pnlSystemQualificationsLayout = new javax.swing.GroupLayout(pnlSystemQualifications);
        pnlSystemQualifications.setLayout(pnlSystemQualificationsLayout);
        pnlSystemQualificationsLayout.setHorizontalGroup(
            pnlSystemQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSystemQualificationsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmbxSystemQualificationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
            .addGroup(pnlSystemQualificationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSystemCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlSystemQualificationsLayout.setVerticalGroup(
            pnlSystemQualificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSystemQualificationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbxSystemQualificationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlSystemCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlQualCards.add(pnlSystemQualifications, "System Qualifications");

        cmbxQualificationRequirementType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Custom Qualifications", "System Qualifications" }));
        cmbxQualificationRequirementType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxQualificationRequirementTypeItemStateChanged(evt);
            }
        });

        btnAddQualificationRequirement.setText("Add Requirement");
        btnAddQualificationRequirement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddQualificationRequirementMouseClicked(evt);
            }
        });

        btnCloseQualificationForm.setText("Save and Exit");
        btnCloseQualificationForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCloseQualificationFormMouseClicked(evt);
            }
        });

        btnQualificationInformation.setText("Open Documentation");
        btnQualificationInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnQualificationInformationMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cmbxQualificationRequirementType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblQualificationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOpenDocsError, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCurrentQualificationRequirements)
                            .addComponent(sclCurrentQualificationRequirements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCloseQualificationForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnQualificationInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlQualCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddQualificationRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteQualificationRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrentQualificationRequirements)
                    .addComponent(cmbxQualificationRequirementType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sclCurrentQualificationRequirements, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddQualificationRequirement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteQualificationRequirement))
                    .addComponent(pnlQualCards, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lblQualificationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQualificationInformation)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCloseQualificationForm)
                        .addContainerGap(31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblOpenDocsError)
                        .addGap(22, 22, 22))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbxQualificationRequirementTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxQualificationRequirementTypeItemStateChanged
        CardLayout cl = (CardLayout) pnlQualCards.getLayout();
        cl.show(pnlQualCards, (String)evt.getItem());
    }//GEN-LAST:event_cmbxQualificationRequirementTypeItemStateChanged

    private void cmbxSystemQualificationTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxSystemQualificationTypeItemStateChanged
        CardLayout cl = (CardLayout) pnlSystemCards.getLayout();
        String selection = (String)evt.getItem();
        if (selection == "Adult Workers" || selection == "Masters") {
            txtSystemComparatorValue.setText("");
            txtSystemComparatorValue.setEnabled(false);
        }
        else {
            txtSystemComparatorValue.setEnabled(true);
        }
        if (selection != "Locale") {
            setComboBoxValues(comparatorHM.get(selection), cmbxSystemComparator);
            if (selection == "HITs Approved") {
                lblQualUnit.setText("HITs");
            }
            else if (selection == "HIT Approval Rate") {
                lblQualUnit.setText("%");
            }
            else {
                lblQualUnit.setText("");
            }
            selection = "Other Qualifications";
        }
        cl.show(pnlSystemCards, selection);
    }//GEN-LAST:event_cmbxSystemQualificationTypeItemStateChanged

    private void setComboBoxValues(String[] values, JComboBox<String> cmbx) {
        cmbx.removeAllItems();
        for (int i = 0; i < values.length; i++) {
            cmbx.addItem(values[i]);
        }
    }
    
    private void btnAddQualificationRequirementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddQualificationRequirementMouseClicked
        try {
            QualificationRequirement qreq = new QualificationRequirement();
            String sysQualType;
            String qtypeId;
            String comparator;
            List<Integer> values = new ArrayList<>();
            if (cmbxQualificationRequirementType.getSelectedItem() == "System Qualifications") {
                sysQualType = cmbxSystemQualificationType.getSelectedItem().toString();
                qtypeId = systemQtypeHM.get(sysQualType);
                switch(sysQualType) {
                    case "Locale":
                        ArrayList locales = getSelectedLocales();
                        qreq.setLocaleValues(locales);
                        comparator = cmbxLocaleComparator.getSelectedItem().toString();
                        break;
                    case "HITs Approved":
                        comparator = cmbxSystemComparator.getSelectedItem().toString();
                        values.add(Util.validatePositiveIntegerWithComparator(txtSystemComparatorValue));
                        qreq.setIntegerValues(values);
                        break;
                    case "Adult Workers":
                        comparator = cmbxSystemComparator.getSelectedItem().toString();
                        values.add(1);
                        qreq.setIntegerValues(values);
                        break;
                    case "HIT Approval Rate":
                        comparator = cmbxSystemComparator.getSelectedItem().toString();
                        values.add(Util.validatePositiveIntegerWithComparator(txtSystemComparatorValue));
                        qreq.setIntegerValues(values);
                        break;
                    case "Masters":
                        comparator = cmbxSystemComparator.getSelectedItem().toString();
                        break;
                    default:
                        comparator = "";
                        break;
                }
            }
            else {
                sysQualType = cmbxQualificationTypes.getSelectedItem().toString();
                qtypeId = customQtypeHM.get(cmbxQualificationTypes.getSelectedItem().toString());
                comparator = cmbxComparator.getSelectedItem().toString();
                if (!(comparator == "Exists" || comparator == "DoesNotExist")) {
                    values.add(Util.validatePositiveIntegerWithComparator(txtValue));
                    qreq.setIntegerValues(values);
                }
            }
            qreq.setQualificationTypeId(qtypeId);
            qreq.setComparator(comparator);
            qreqsHM.put(sysQualType, qreq);
            setQualificationRequirementsList();
            lblQualificationStatus.setText("Successful Input");
            txtSystemComparatorValue.setText("");
            txtValue.setText("");
        } catch (Exception e) {
            lblQualificationStatus.setText("Invalid Inputs, Try again");
        }
    }//GEN-LAST:event_btnAddQualificationRequirementMouseClicked

    private void btnDeleteQualificationRequirementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteQualificationRequirementMouseClicked
        String selected = lstCurrentQualificationRequirements.getSelectedValue();
        qreqsHM.remove(selected);
        setQualificationRequirementsList();
    }//GEN-LAST:event_btnDeleteQualificationRequirementMouseClicked

    private void btnCloseQualificationFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseQualificationFormMouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseQualificationFormMouseClicked

    private void btnQualificationInformationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnQualificationInformationMouseClicked
        String result = Util.openWebsite("docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html");
        if (!result.isEmpty()) {
            lblOpenDocsError.setText("Error: " + result);
        }
    }//GEN-LAST:event_btnQualificationInformationMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddQualificationRequirement;
    private javax.swing.JButton btnCloseQualificationForm;
    private javax.swing.JButton btnDeleteQualificationRequirement;
    private javax.swing.JButton btnQualificationInformation;
    private javax.swing.JComboBox<String> cmbxActionsGuarded;
    private javax.swing.JComboBox<String> cmbxComparator;
    private javax.swing.JComboBox<String> cmbxLocaleComparator;
    private javax.swing.JComboBox<String> cmbxQualificationRequirementType;
    private javax.swing.JComboBox<String> cmbxQualificationTypes;
    private javax.swing.JComboBox<String> cmbxSystemComparator;
    private javax.swing.JComboBox<String> cmbxSystemQualificationType;
    private javax.swing.JLabel lblActionsGuarded;
    private javax.swing.JLabel lblComparator;
    private javax.swing.JLabel lblCurrentQualificationRequirements;
    private javax.swing.JLabel lblOpenDocsError;
    private javax.swing.JLabel lblQualUnit;
    private javax.swing.JLabel lblQualificationStatus;
    private javax.swing.JLabel lblQualificationType;
    private javax.swing.JLabel lblValue;
    private javax.swing.JList<String> lstCurrentQualificationRequirements;
    private javax.swing.JList<String> lstLocales;
    private javax.swing.JPanel pnlCustomQualifications;
    private javax.swing.JPanel pnlLocale;
    private javax.swing.JPanel pnlOtherSystemQualifications;
    private javax.swing.JPanel pnlQualCards;
    private javax.swing.JPanel pnlSystemCards;
    private javax.swing.JPanel pnlSystemQualifications;
    private javax.swing.JScrollPane sclCurrentQualificationRequirements;
    private javax.swing.JScrollPane sclLocales;
    private javax.swing.JTextField txtSystemComparatorValue;
    private javax.swing.JTextField txtValue;
    // End of variables declaration//GEN-END:variables
}
